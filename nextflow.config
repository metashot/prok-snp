params {
    /* Input and output options */
    reads = "data/*{1,2}.fastq.gz"    // input reads (FASTA/FASTQ, gzip compressed files also supported)
    ref = "reference.fa"              // a reference genome in FASTA or GENBANK format (can be in multiple contigs)
    outdir = "./results"              // output directory
    single_end = false                // true if the input reads are single-end (if contigs = false)
    interleaved = false               // true if the input paired-end reads are interleaved (if contigs = false)
    targets = 'none'                  // takes a BED file and only calls variants in those regions

    /* snippy options */
    report = false                    // generate a snps.report.txt

    /* gubbins options */
    skip_gubbins = false              // skip gubbins
    gubbins_tree_builder = "raxml"    // the algorithm to use in the construction of phylogenies in the analysis
                                      // ('raxml', 'fasttree', or 'hybrid')
    gubbins_iterations = 5            // the maximum number of iterations to perform

    /* RAxML  options */
    skip_raxml = false                // skip raxml
    raxml_mode = "default"            // RAxML mode , "default": default RAxML tree search algorithm or
                                      // "rbs": rapid bootstrapping full analysis
    raxml_nsearch = 10                // "default" mode only: number of inferences on the original alignment using
                                      // distinct randomized MP trees
    raxml_nboot = "autoMRE"           // "rbs" mode only: bootstrap convergence criterion or number of bootstrap 
                                      // searches (see -I and -#/-N options in RAxML)
    
    /* Limits */
    max_cpus = 16
    max_memory = 32.GB
    max_time = 96.h
}    


/* Docker options */
docker.enabled = true
docker.runOptions = '-u \$(id -u):\$(id -g)'


/* Import process configuration file*/
includeConfig 'process.config'


/* Manifest */
manifest {
    homePage = 'metashot.github.io'
    description = 'SNVs identification and phylogenetic tree inference from prokaryotic isolates'
    mainScript = 'main.nf'
    version = '1.0.0'
}


/* Functions */
def check_max(obj, max) {
    // see https://github.com/nextflow-io/nextflow/issues/640
    if( obj instanceof nextflow.util.MemoryUnit ) {
        try {
            def max_type = max as nextflow.util.MemoryUnit
            return obj.compareTo(max_type) == 1 ? max_type : obj
        }   
        catch( all ) {
            println "ERROR: invalid max memory '${max}', using default value: $obj"
            return obj
        }   
    }
    if( obj instanceof nextflow.util.Duration ) {
        try {
            def max_type = max as nextflow.util.Duration
            return obj.compareTo(max_type) == 1 ? max_type : obj
        }   
        catch( all ) {
            println "ERROR: invalid max time '${max}', using default value $obj"
            return obj
        }         
    }
    if( obj instanceof Integer ) {
        try {
            return Math.min(obj, max as int)
        }   
        catch( all ) {
            println "ERROR: invalid max cpus '${max}', using default value $obj"
            return obj
        }         
    }    
}
